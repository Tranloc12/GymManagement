import { useEffect, useState } from "react";
import { Button, Card, Carousel, Col, Container, Row, Badge, Spinner } from "react-bootstrap";
import { useNavigate, useLocation } from "react-router-dom";
import Apis, { authApis, endpoints } from "../configs/Apis";
import dayjs from "dayjs";
import { handleApiCall } from "../utils/apiUtils";
import "../index.css";

const Home = () => {
  const [services, setServices] = useState([]);
  const [testimonials, setTestimonials] = useState([]);
  const [gymPackages, setGymPackages] = useState([]);
  const [topReviews, setTopReviews] = useState([]);
  const [loadingReviews, setLoadingReviews] = useState(true);

  const location = useLocation();
  const navigate = useNavigate();

  const loadServices = async () => {
    const mockServices = [
      {
        id: 1,
        name: "Personal Training",
        description: "Hu·∫•n luy·ªán c√° nh√¢n v·ªõi chuy√™n gia",
        image: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80"
      },
      {
        id: 2,
        name: "Group Classes",
        description: "L·ªõp t·∫≠p nh√≥m ƒëa d·∫°ng",
        image: "https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80"
      },
      {
        id: 3,
        name: "Nutrition Consulting",
        description: "T∆∞ v·∫•n dinh d∆∞·ª°ng chuy√™n nghi·ªáp",
        image: "https://images.unsplash.com/photo-1490645935967-10de6ba17061?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80"
      }
    ];

    await handleApiCall(
      () => Apis.get(endpoints["services"]),
      setServices,
      'services',
      mockServices
    );
  };

  const loadTestimonials = async () => {
    const mockTestimonials = [
      {
        id: 1,
        name: "Nguy·ªÖn VƒÉn A",
        role: "Th√†nh vi√™n VIP",
        comment: "Gym n√†y th·∫≠t tuy·ªát v·ªùi! T√¥i ƒë√£ gi·∫£m ƒë∆∞·ª£c 10kg trong 3 th√°ng.",
        avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80"
      },
      {
        id: 2,
        name: "Tr·∫ßn Th·ªã B",
        role: "Th√†nh vi√™n th∆∞·ªùng",
        comment: "Hu·∫•n luy·ªán vi√™n r·∫•t chuy√™n nghi·ªáp v√† nhi·ªát t√¨nh.",
        avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80"
      },
      {
        id: 3,
        name: "L√™ VƒÉn C",
        role: "Th√†nh vi√™n m·ªõi",
        comment: "M√¥i tr∆∞·ªùng t·∫≠p luy·ªán s·∫°ch s·∫Ω, thi·∫øt b·ªã hi·ªán ƒë·∫°i.",
        avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80"
      }
    ];

    await handleApiCall(
      () => Apis.get(endpoints["testimonials"]),
      setTestimonials,
      'testimonials',
      mockTestimonials
    );
  };

  const loadGymPackages = async () => {
    try {
      const res = await Apis.get(endpoints["gym-packages"]);
      setGymPackages(res.data);
    } catch (err) {
      console.error("Error loading gym packages:", err);
    }
  };

  const loadTopReviews = async () => {
    try {
      const res = await authApis().get(endpoints["secure-reviews"]);
      const latest = res.data
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        .slice(0, 3);
      setTopReviews(latest);
    } catch (err) {
      console.error("Error loading reviews:", err);
    } finally {
      setLoadingReviews(false);
    }
  };

  useEffect(() => {
    loadServices();
    loadTestimonials();
    loadGymPackages();
    loadTopReviews();
  }, [location.pathname]);

  const getChoiceLabel = (choice) => {
    const [duration, unit] = choice.split("-");
    const number = parseInt(duration);

    if (unit === "month") return `${number} th√°ng`;
    if (unit === "quarter") return `${number} qu√Ω - ${number * 3} th√°ng`;
    if (unit === "year") return `${number} nƒÉm - ${number * 12} th√°ng`;

    return choice;
  };

  return (
    <div className="home-page">
      {/* Hero Section */}
      <section className="hero-section">
        <Carousel>
          <Carousel.Item>
            <img
              className="d-block w-100"
              src="https://images.unsplash.com/photo-1599058917212-d750089bc07e?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80"
              alt="Gym Banner 1"
            />
            <Carousel.Caption>
              <h1>Ch√†o M·ª´ng ƒê·∫øn V·ªõi Gym C·ªßa S·ª©c M·∫°nh</h1>
              <p>Bi·∫øn ∆∞·ªõc m∆° v·ªÅ m·ªôt c∆° th·ªÉ kh·ªèe m·∫°nh th√†nh hi·ªán th·ª±c!</p>
              <Button variant="primary" size="lg" onClick={() => navigate("/register")}>
                ƒêƒÉng K√Ω Ngay
              </Button>
            </Carousel.Caption>
          </Carousel.Item>
          <Carousel.Item>
            <img
              className="d-block w-100"
              src="https://beast.com.vn/wp-content/uploads/2024/07/thiet-ke-phong-gym-10.webp"
              alt="Gym Banner 2"
            />
            <Carousel.Caption>
              <h1>Tham Gia C√°c L·ªõp T·∫≠p Chuy√™n Nghi·ªáp</h1>
              <p>H√£y c√πng ch√∫ng t√¥i chinh ph·ª•c m·ªçi th·ª≠ th√°ch!</p>
              <Button variant="primary" size="lg" onClick={() => navigate("/register")}>
                Tham Gia Ngay
              </Button>
            </Carousel.Caption>
          </Carousel.Item>
        </Carousel>
      </section>

      {/* G√≥i T·∫≠p */}
      <section className="gym-packages-section py-5" style={{ background: "#f8f9fa" }}>
        <Container>
          <h2 className="text-center fw-bold mb-5 display-5 text-dark">üéñÔ∏è C√°c G√≥i T·∫≠p Cao C·∫•p</h2>
          <Row>
            {gymPackages.length > 0 ? (
              gymPackages.map((p) => (
                <Col md={4} key={p.id} className="mb-5">
                  <Card className="h-100 shadow-lg border-0 rounded-4 bg-white custom-card">
                    <Card.Body className="p-4 d-flex flex-column justify-content-between">
                      <div>
                        <Card.Title className="fw-bold fs-4 text-center text-dark mb-3">
                          {p.namePack}
                        </Card.Title>
                        <Card.Subtitle className="mb-3 text-center text-warning fs-5 fw-semibold">
                          {p.price.toLocaleString()} VNƒê
                        </Card.Subtitle>
                        <ul className="list-unstyled lh-lg text-secondary">
                          <li>‚è≥ <strong>Th·ªùi gian:</strong> {getChoiceLabel(p.choice)}</li>
                          <li>üéØ <strong>Quy·ªÅn l·ª£i:</strong> {p.description}</li>
                          <li>üí™ <strong>S·ªë bu·ªïi PT:</strong> {p.dayswpt}</li>
                          <li>üéÅ <strong>Gi·∫£m gi√°:</strong> {p.discount ? `${p.discount}%` : "Kh√¥ng c√≥"}</li>
                        </ul>
                      </div>
                      <div className="text-center mt-4">
                        <Button
                          variant="dark"
                          className="px-4 py-2 rounded-pill"
                          onClick={() => navigate("/register")}
                        >
                          ƒêƒÉng k√Ω ngay
                        </Button>
                      </div>
                    </Card.Body>
                    <Card.Footer className="text-center bg-transparent border-0">
                      <Badge bg={p.isActive ? "success" : "danger"} className="px-3 py-2 rounded-pill">
                        {p.isActive ? "ƒêang ho·∫°t ƒë·ªông" : "T·∫°m ng·ª´ng"}
                      </Badge>
                    </Card.Footer>
                  </Card>
                </Col>
              ))
            ) : (
              <p className="text-center text-muted fs-5">ƒêang t·∫£i g√≥i t·∫≠p...</p>
            )}
          </Row>
        </Container>
      </section>

      {/* ƒê√°nh gi√° ti√™u bi·ªÉu */}
      <section className="py-5 bg-white">
        <Container>
          <h2 className="text-center fw-bold mb-4">üí¨ ƒê√°nh Gi√° Ti√™u Bi·ªÉu</h2>
          {loadingReviews ? (
            <div className="text-center">
              <Spinner animation="border" />
            </div>
          ) : topReviews.length === 0 ? (
            <p className="text-center text-muted">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
          ) : (
            <Row>
              {topReviews.map((r) => (
                <Col md={4} key={r.id} className="mb-4">
                  <Card className="shadow-sm h-100 rounded-4">
                    <Card.Body>
                      <Card.Title className="text-warning">‚≠ê {r.rating}/5</Card.Title>
                      <Card.Text className="text-secondary">
                        <strong>PT:</strong> {r.reviewTrainer}<br />
                        <strong>G√≥i:</strong> {r.reviewPack}<br />
                        <strong>Ph√≤ng Gym:</strong> {r.reviewGym}<br />
                        <small className="text-muted">
                          Ng√†y: {dayjs(r.createdAt).format("DD/MM/YYYY")}
                        </small>
                      </Card.Text>
                    </Card.Body>
                  </Card>
                </Col>
              ))}
            </Row>
          )}
        </Container>
      </section>

      {/* Call-to-Action */}
      <section className="cta-section text-center">
        <Container>
          <h2>S·∫µn S√†ng ƒê·ªÉ Thay ƒê·ªïi C∆° Th·ªÉ C·ªßa B·∫°n?</h2>
          <p>ƒêƒÉng k√Ω ngay h√¥m nay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát!</p>
          <Button variant="success" size="lg" onClick={() => navigate("/register")}>
            ƒêƒÉng K√Ω Ngay
          </Button>
        </Container>
      </section>
    </div>
  );
};

export default Home;
