/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.nhom12.services.impl;

import com.nhom12.pojo.GymPackage;
import com.nhom12.pojo.Subscription;
import com.nhom12.pojo.User;
import com.nhom12.pojo.Workout;
import com.nhom12.services.NotificationService;
import com.nhom12.services.SubscriptionService;
import com.nhom12.services.UserService;
import com.nhom12.services.WorkoutService;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

/**
 *
 * @author HP
 */
@Service
public class NotificationServiceImpl implements NotificationService {

    @Autowired
    private WorkoutService workoutService;

    @Autowired
    private SubscriptionService subService;

    @Autowired
    private UserService userService;

    @Autowired
    private EmailServiceImpl emailService;

    @Override
    @Scheduled(cron = "0 * * * * *", zone = "Asia/Ho_Chi_Minh") // l√™n l·ªãch ch·∫°y m·ªói ph√∫t
    public void checkAndSendAdvanceReminders() {
        // Ch·ªâ x·ª≠ l√Ω th√¥ng b√°o l·ªãch t·∫≠p (15 ph√∫t v√† 30 ph√∫t tr∆∞·ªõc)
        System.out.println(
                "com.nhom12.services.impl.NotificationServiceImpl.checkAndSendAdvanceReminders() ======================== T·ª∞ ƒê·ªòNG ƒê√ÇY N√à");
        Date now = new Date(); // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i

        Calendar cal = Calendar.getInstance();
        cal.setTime(now);

        // T√≠nh t30
        cal.add(Calendar.MINUTE, 30);
        Date t30 = cal.getTime();

        // T√≠nh t30Next = t30 + 1 ph√∫t
        cal.add(Calendar.MINUTE, 1);
        Date t30Next = cal.getTime();

        // Reset v·ªÅ now r·ªìi t√≠nh t15
        cal.setTime(now);
        cal.add(Calendar.MINUTE, 15);
        Date t15 = cal.getTime();

        cal.add(Calendar.MINUTE, 1);
        Date t15Next = cal.getTime();

        System.out.println("T30: " + t30);
        System.out.println("T30Next: " + t30Next);

        System.out.println("T15: " + t15);
        System.out.println("T15Next: " + t15Next);

        // 2. L·∫•y c√°c reminder c·∫ßn th√¥ng b√°o (gi·ªØ logic ban ƒë·∫ßu)
        List<Workout> due30 = this.workoutService.findDue30(t30, t30Next);
        for (Workout r : due30) {
            System.out.println("c√≥ ch·ª´ng n√†y workout:   ============== 1" + r.getId());
            sendAdvanceNotification(r, 30);
            workoutService.markNotified30(r);
        }

        List<Workout> due15 = this.workoutService.findDue15(t15, t15Next);
        for (Workout r : due15) {
            System.out.println("c√≥ ch·ª´ng n√†y workout:   ============== 2" + r.getId());
            sendAdvanceNotification(r, 15);
            workoutService.markNotified15(r);
        }
    }

    
    @Scheduled(cron = "0 21 20 * * *", zone = "Asia/Ho_Chi_Minh")
    public void checkAndSendSubscriptionExpiryNotifications() {
        System.out.println(
                "com.nhom12.services.impl.NotificationServiceImpl.checkAndSendSubscriptionExpiryNotifications() ======================== TH√îNG B√ÅO SUBSCRIPTION");

        // Reset t·∫•t c·∫£ notified7 v·ªÅ false ƒë·ªÉ c√≥ th·ªÉ g·ª≠i l·∫°i m·ªói ng√†y
        subService.resetAllNotified7();

        Date now = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(now);
        cal.add(Calendar.DAY_OF_YEAR, 7); // 7 ng√†y t·ª´ b√¢y gi·ªù
        Date sevenDaysLater = cal.getTime();

        // T√¨m t·∫•t c·∫£ subscription c√≥ endDate <= 7 ng√†y t·ª´ hi·ªán t·∫°i
        List<Subscription> subscriptions = subService.findSubscriptionsExpiringSoon(sevenDaysLater);

        for (Subscription sub : subscriptions) {
            System.out.println("Subscription s·∫Øp h·∫øt h·∫°n: " + sub.getId() + " - C√≤n " +
                    ((sub.getEndDate().getTime() - now.getTime()) / (1000 * 60 * 60 * 24)) + " ng√†y");
            sendSubscriptionExpiryNotification(sub);
            subService.markNotified7(sub);
        }

        System.out.println("ƒê√£ g·ª≠i th√¥ng b√°o cho " + subscriptions.size() + " subscription s·∫Øp h·∫øt h·∫°n");
    }

    @Override
    public void sendAdvanceNotification(Workout w, int minutesBefore) {
        String when = minutesBefore + " ph√∫t";
        String subject = "C√≤n " + when + " ƒë·∫øn bu·ªïi t·∫≠p " + w.getType();
        String body = "Nh·∫Øc nh·ªü bu·ªïi t·∫≠p " + w.getType() + " h√¥m nay"
                + "\n\nTh·ªùi gian b·∫Øt ƒë·∫ßu: "
                + new SimpleDateFormat("HH:mm")
                        .format(w.getStartTime());

        // L∆∞u v√†o DB
        // Notification n = new Notification();
        // n.setUser(r.getUser());
        // n.setTitle(subject);
        // n.setMessage(body);
        // n.setSentAt(new Date());
        // notificationRepo.save(n);
        // G·ª≠i email
        emailService.sendSimpleEmail(w.getSubscriptionId().getMemberId().getEmail(), subject, body);
    }

    private void sendSubscriptionExpiryNotification(Subscription sub) {
        String subject = "G√≥i t·∫≠p c·ªßa b·∫°n s·∫Øp h·∫øt h·∫°n";

        // T√≠nh s·ªë ng√†y c√≤n l·∫°i
        Date now = new Date();
        long diffInMillies = sub.getEndDate().getTime() - now.getTime();
        long daysLeft = diffInMillies / (1000 * 60 * 60 * 24);

        String body = "Ch√†o " + sub.getMemberId().getUsername() + ",\n\n"
                + "G√≥i t·∫≠p c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong " + daysLeft + " ng√†y.\n"
                + "Ng√†y h·∫øt h·∫°n: " + new SimpleDateFormat("dd/MM/yyyy").format(sub.getEndDate()) + "\n\n"
                + "Vui l√≤ng gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•.\n\n"
                + "Tr√¢n tr·ªçng,\nGym Management Team";

        emailService.sendSimpleEmail(sub.getMemberId().getEmail(), subject, body);
    }

    @Override
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendDiscountNotificationToAllMembers(GymPackage gymPackage, Double oldDiscount,
            Double newDiscount) {
        System.out.println("G·ª≠i th√¥ng b√°o discount cho t·∫•t c·∫£ members - Package: " + gymPackage.getNamePack());

        // L·∫•y t·∫•t c·∫£ user c√≥ role ROLE_MEMBER
        List<User> members = userService.getUsersByRole("ROLE_MEMBER");

        if (members.isEmpty()) {
            System.out.println("Kh√¥ng c√≥ member n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o");
            return CompletableFuture.completedFuture(null);
        }

        // T·∫°o n·ªôi dung email
        String subject = "üéâ C·∫≠p nh·∫≠t gi√° ∆∞u ƒë√£i g√≥i t·∫≠p " + gymPackage.getNamePack();

        String discountInfo = "";
        if (oldDiscount == null || oldDiscount == 0) {
            if (newDiscount != null && newDiscount > 0) {
                discountInfo = "‚ú® Tin tuy·ªát v·ªùi! G√≥i t·∫≠p " + gymPackage.getNamePack() + " hi·ªán c√≥ ∆∞u ƒë√£i " + newDiscount
                        + "% cho t·∫•t c·∫£ th√†nh vi√™n!";
            }
        } else {
            if (newDiscount == null || newDiscount == 0) {
                discountInfo = "G√≥i t·∫≠p " + gymPackage.getNamePack() + " ƒë√£ k·∫øt th√∫c ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i.";
            } else {
                discountInfo = "üî• C·∫≠p nh·∫≠t ∆∞u ƒë√£i! G√≥i t·∫≠p " + gymPackage.getNamePack() + " thay ƒë·ªïi t·ª´ " + oldDiscount
                        + "% th√†nh " + newDiscount + "% ∆∞u ƒë√£i!";
            }
        }

        // T√≠nh gi√° sau ∆∞u ƒë√£i
        double finalPrice = gymPackage.getPrice();
        if (newDiscount != null && newDiscount > 0) {
            finalPrice = gymPackage.getPrice() * (100 - newDiscount) / 100;
        }

        String body = "Ch√†o b·∫°n,\n\n"
                + discountInfo + "\n\n"
                + "üìã Th√¥ng tin g√≥i t·∫≠p:\n"
                + "‚Ä¢ T√™n g√≥i: " + gymPackage.getNamePack() + "\n"
                + "‚Ä¢ Gi√° g·ªëc: " + String.format("%.0f", gymPackage.getPrice()) + " VND\n"
                + "‚Ä¢ ∆Øu ƒë√£i: " + (newDiscount != null && newDiscount > 0 ? newDiscount + "%" : "Kh√¥ng c√≥") + "\n"
                + "‚Ä¢ Gi√° sau ∆∞u ƒë√£i: " + String.format("%.0f", finalPrice) + " VND\n"
                + "‚Ä¢ Th·ªùi h·∫°n: "
                + (gymPackage.getDayswpt() != null ? gymPackage.getDayswpt() + " ng√†y" : "Kh√¥ng gi·ªõi h·∫°n") + "\n\n"
                + "üìù M√¥ t·∫£: " + (gymPackage.getDescription() != null ? gymPackage.getDescription() : "Kh√¥ng c√≥ m√¥ t·∫£")
                + "\n\n"
                + "üèÉ‚Äç‚ôÇÔ∏è ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi tuy·ªát v·ªùi n√†y! Li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒëƒÉng k√Ω.\n\n"
                + "Tr√¢n tr·ªçng,\n"
                + "Gym Management Team";

        // G·ª≠i email cho t·∫•t c·∫£ members
        int successCount = 0;
        int failCount = 0;

        for (User member : members) {
            try {
                emailService.sendSimpleEmail(member.getEmail(), subject, body);
                successCount++;
                System.out.println("ƒê√£ g·ª≠i email cho member: " + member.getUsername() + " (" + member.getEmail() + ")");
            } catch (Exception e) {
                failCount++;
                System.err.println("L·ªói g·ª≠i email cho member: " + member.getUsername() + " - " + e.getMessage());
            }
        }

        System.out.println("Ho√†n th√†nh g·ª≠i th√¥ng b√°o discount:");
        System.out.println("- Th√†nh c√¥ng: " + successCount + " emails");
        System.out.println("- Th·∫•t b·∫°i: " + failCount + " emails");
        System.out.println("- T·ªïng members: " + members.size());

        return CompletableFuture.completedFuture(null);
    }

}
